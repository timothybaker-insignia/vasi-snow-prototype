<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope) {
  /* widget controller */
  var c = this;
	
	function download(content, fileName, contentType) {
    var a = document.createElement("a");
    var file = new Blob([content], {type: contentType});
    a.href = URL.createObjectURL(file);
    a.download = fileName;
    a.click();
	}	
	
	c.fetch = function(data){
		var input = {};
		input.action = "generate report";
		input.id = data.id;
		c.server.get(input).then(function(response){
			c.system = response.data.system;	
			c.exists = response.data.exists;
		});
	};
	
	$rootScope.$on('generateReport', function(event,data) {
		c.fetch(data);
	});
	
	window.generateSystemReport = function(event){
		if(c.exists){
			var jsonData = JSON.stringify(c.system.displayValue);
			var reportName = c.system.value.id + '-' + c.system.value.name + '.txt';
			reportName = reportName.replace(' ', '-').toLowerCase();
			download(jsonData, reportName, 'text/plain');
		}
		else{
			console.log("record not found");
		}
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>generate_system_report</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Generate System Report</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {	
	
	data.system={};
	data.system.displayValue={};
	data.system.value={};
	
	if(input && input.action=='generate report'){
		var gr = new GlideRecord('x_368247_vasi_prot_systems_inventory');
		
		if(gr.get('id', input.id)){
			data.exists = true;
		}
		else{
			data.exists = false;
		}
		
		for(var key in gr){
		  data.system.displayValue[key] = gr.getDisplayValue(key);
			data.system.value[key] = gr.getValue(key);
		}	
	}
	
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>timothy.baker</sys_created_by>
        <sys_created_on>2019-07-15 19:28:06</sys_created_on>
        <sys_id>29eec4a3db663300e16bd426ca9619f8</sys_id>
        <sys_mod_count>105</sys_mod_count>
        <sys_name>Generate System Report</sys_name>
        <sys_package display_value="vasi_prototype" source="x_368247_vasi_prot">18ecdf4ddb063300e16bd426ca961977</sys_package>
        <sys_policy/>
        <sys_scope display_value="vasi_prototype">18ecdf4ddb063300e16bd426ca961977</sys_scope>
        <sys_update_name>sp_widget_29eec4a3db663300e16bd426ca9619f8</sys_update_name>
        <sys_updated_by>timothy.baker</sys_updated_by>
        <sys_updated_on>2019-07-16 14:16:41</sys_updated_on>
        <template><![CDATA[<div>
	<button onclick="generateSystemReport(event)">
   	Generate System Report
  </button>
</div>]]></template>
    </sp_widget>
</record_update>
